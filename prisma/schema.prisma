generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId              Int       @id @default(autoincrement()) @map("user_id")
  email               String    @unique
  password            String?
  nickname            String    @unique
  oneLiner            String?  @map("one_liner")
  imageUrl            String?   @default("https://nyjtkd.net/common/img/default_profile.png") @map("image_url")
  provider            Provider    
  emailVerified       Boolean   @map("email_varified")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  refreshToken RefreshToken?
  comment      Comment[]
  like         Like[]
  posts        Post[]
  followers    Follows[]     @relation("followers")
  following    Follows[]     @relation("following")

  @@map("user")
}

model Post {
  postId    Int      @id @default(autoincrement()) @map("post_id")
  userId    Int      @map("user_id")
  title     String
  content   String
  regionId  Int      @map("region_id")
  imageUrl  String   @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User           @relation(fields: [userId], references: [userId])
  Comment Comment[]
  Like    Like[]
  region  RegionCategory @relation(fields: [regionId], references: [regionCategoryId])

  @@map("post")
}

model RegionCategory {
  regionCategoryId Int    @id @default(autoincrement()) @map("region_category_id")
  regionName       String @map("region_name")

  posts Post[]

  @@map("region_category")
}

model RefreshToken {
  refreshTokenId Int      @id @default(autoincrement())
  userId         Int      @unique
  refreshToken   String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [userId])

  @@map("refresh_token")
}

model Comment {
  commentId Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId])
  post Post @relation(fields: [postId], references: [postId])

  @@map("comment")
}

model Like {
  likeId    Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [postId])
  user User @relation(fields: [userId], references: [userId])

  @@map("like")
}

model Follows {
  followId   Int      @id @default(autoincrement())
  followerId Int
  followedId Int
  createdAt  DateTime @default(now())

  follower User @relation("followers", fields: [followerId], references: [userId])
  followed User @relation("following", fields: [followedId], references: [userId])

  @@map("follows")
}

model EmailAuthCode {
  emailCodeId  Int      @id @default(autoincrement())
  email        String
  emailCode    String   @map("email_code")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  expirationAt DateTime @map("expiration_at")

  @@map("email_auth_code")
}

enum Provider {
  local
  naver
  kakao
}
